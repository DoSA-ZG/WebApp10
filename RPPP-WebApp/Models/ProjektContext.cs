// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace RPPP_WebApp.Models;

public partial class ProjektContext : DbContext
{
    public ProjektContext(DbContextOptions<ProjektContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Aktivnost> Aktivnosts { get; set; }

    public virtual DbSet<PlanProjektum> PlanProjekta { get; set; }

    public virtual DbSet<PrioritetZadatka> PrioritetZadatkas { get; set; }

    public virtual DbSet<PripadnostFirmi> PripadnostFirmis { get; set; }

    public virtual DbSet<Projekt> Projekts { get; set; }

    public virtual DbSet<ProjektnaDokumentacija> ProjektnaDokumentacijas { get; set; }

    public virtual DbSet<RacunProjektum> RacunProjekta { get; set; }

    public virtual DbSet<Sudionik> Sudioniks { get; set; }

    public virtual DbSet<Sudjeluju> Sudjelujus { get; set; }

    public virtual DbSet<Transakcija> Transakcijas { get; set; }

    public virtual DbSet<Uloge> Uloges { get; set; }

    public virtual DbSet<VoditeljProjektum> VoditeljProjekta { get; set; }

    public virtual DbSet<VrstaAktivnosti> VrstaAktivnostis { get; set; }

    public virtual DbSet<VrstaDokumentum> VrstaDokumenta { get; set; }

    public virtual DbSet<VrstaProjektum> VrstaProjekta { get; set; }

    public virtual DbSet<VrstaTransakcije> VrstaTransakcijes { get; set; }

    public virtual DbSet<VrstaUloge> VrstaUloges { get; set; }

    public virtual DbSet<Zadaci> Zadacis { get; set; }

    public virtual DbSet<Zahtjev> Zahtjevs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Aktivnost>(entity =>
        {
            entity.HasKey(e => e.IdAktivnost);

            entity.ToTable("Aktivnost");

            entity.Property(e => e.IdAktivnost).ValueGeneratedNever();
            entity.Property(e => e.DatumPocetka).HasColumnType("date");
            entity.Property(e => e.DatumZavrsetka).HasColumnType("date");
            entity.Property(e => e.OpisAktivnosti)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdVrstaAktivnostiNavigation).WithMany(p => p.Aktivnosts)
                .HasForeignKey(d => d.IdVrstaAktivnosti)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aktivnost_VrstaAktivnosti");

            entity.HasMany(d => d.IdPlanProjekta).WithMany(p => p.IdAktivnosts)
                .UsingEntity<Dictionary<string, object>>(
                    "Sadrzi",
                    r => r.HasOne<PlanProjektum>().WithMany()
                        .HasForeignKey("IdPlanProjekta")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Sadrzi_PlanProjekta"),
                    l => l.HasOne<Aktivnost>().WithMany()
                        .HasForeignKey("IdAktivnost")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Sadrzi_Aktivnost"),
                    j =>
                    {
                        j.HasKey("IdAktivnost", "IdPlanProjekta");
                        j.ToTable("Sadrzi");
                    });
        });

        modelBuilder.Entity<PlanProjektum>(entity =>
        {
            entity.HasKey(e => e.IdPlanProjekta);

            entity.Property(e => e.IdPlanProjekta).ValueGeneratedNever();
            entity.Property(e => e.PlaniraniPocetakZadatka).HasColumnType("date");
            entity.Property(e => e.PlaniraniZavrsetakZadatka).HasColumnType("date");
            entity.Property(e => e.StvarniPocetakZadatka).HasColumnType("date");
            entity.Property(e => e.StvarniZavrsetakZadatka).HasColumnType("date");

            entity.HasOne(d => d.IdProjektNavigation).WithMany(p => p.PlanProjekta)
                .HasForeignKey(d => d.IdProjekt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlanProjekta_Projekt");

            entity.HasOne(d => d.IdVoditeljNavigation).WithMany(p => p.PlanProjekta)
                .HasForeignKey(d => d.IdVoditelj)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlanProjekta_VoditeljProjekta");
        });

        modelBuilder.Entity<PrioritetZadatka>(entity =>
        {
            entity.HasKey(e => e.IdPrioritetZadatka);

            entity.ToTable("PrioritetZadatka");

            entity.Property(e => e.IdPrioritetZadatka).ValueGeneratedNever();
            entity.Property(e => e.RazinaPrioriteta)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PripadnostFirmi>(entity =>
        {
            entity.HasKey(e => e.IdFirma);

            entity.ToTable("PripadnostFirmi");

            entity.Property(e => e.IdFirma).ValueGeneratedNever();
            entity.Property(e => e.AdresaSjedista)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NazivFirma)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Projekt>(entity =>
        {
            entity.HasKey(e => e.IdProjekt);

            entity.ToTable("Projekt");

            entity.Property(e => e.IdProjekt).ValueGeneratedNever();
            entity.Property(e => e.DatumPocetka).HasColumnType("date");
            entity.Property(e => e.DatumZavrsetka).HasColumnType("date");
            entity.Property(e => e.KraticaProjekta)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NazivProjekta)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.IdVrstaProjektaNavigation).WithMany(p => p.Projekts)
                .HasForeignKey(d => d.IdVrstaProjekta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Projekt_VrstaProjekta");

            entity.HasMany(d => d.IdZahtjevs).WithMany(p => p.IdProjekts)
                .UsingEntity<Dictionary<string, object>>(
                    "ZahtjevPripadum",
                    r => r.HasOne<Zahtjev>().WithMany()
                        .HasForeignKey("IdZahtjev")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ZahtjevPripada_Zahtjev"),
                    l => l.HasOne<Projekt>().WithMany()
                        .HasForeignKey("IdProjekt")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ZahtjevPripada_Projekt"),
                    j =>
                    {
                        j.HasKey("IdProjekt", "IdZahtjev");
                        j.ToTable("ZahtjevPripada");
                    });
        });

        modelBuilder.Entity<ProjektnaDokumentacija>(entity =>
        {
            entity.HasKey(e => e.IdDokument);

            entity.ToTable("ProjektnaDokumentacija");

            entity.Property(e => e.IdDokument).ValueGeneratedNever();
            entity.Property(e => e.FormatDokumenta).HasMaxLength(50);
            entity.Property(e => e.NazivDokumenta)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.IdProjektNavigation).WithMany(p => p.ProjektnaDokumentacijas)
                .HasForeignKey(d => d.IdProjekt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjektnaDokumentacija_Projekt");

            entity.HasOne(d => d.IdVrstaDokumentNavigation).WithMany(p => p.ProjektnaDokumentacijas)
                .HasForeignKey(d => d.IdVrstaDokument)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjektnaDokumentacija_VrstaDokumenta");
        });

        modelBuilder.Entity<RacunProjektum>(entity =>
        {
            entity.HasKey(e => e.Iban);

            entity.Property(e => e.Iban)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBAN");
            entity.Property(e => e.NazivProjekta)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StanjeRacuna)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdProjektNavigation).WithMany(p => p.RacunProjekta)
                .HasForeignKey(d => d.IdProjekt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RacunProjekta_Projekt");

            entity.HasMany(d => d.IdTransakcijas).WithMany(p => p.Ibans)
                .UsingEntity<Dictionary<string, object>>(
                    "Pregledavamo",
                    r => r.HasOne<Transakcija>().WithMany()
                        .HasForeignKey("IdTransakcija")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Pregledavamo_Transakcija"),
                    l => l.HasOne<RacunProjektum>().WithMany()
                        .HasForeignKey("Iban")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_Pregledavamo_RacunProjekta"),
                    j =>
                    {
                        j.HasKey("Iban", "IdTransakcija");
                        j.ToTable("Pregledavamo");
                        j.IndexerProperty<string>("Iban")
                            .HasMaxLength(50)
                            .IsUnicode(false)
                            .HasColumnName("IBAN");
                    });
        });

        modelBuilder.Entity<Sudionik>(entity =>
        {
            entity.HasKey(e => e.IdSudionik);

            entity.ToTable("Sudionik");

            entity.Property(e => e.IdSudionik).ValueGeneratedNever();
            entity.Property(e => e.AdresaUreda)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Kontakt)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdFirmaNavigation).WithMany(p => p.Sudioniks)
                .HasForeignKey(d => d.IdFirma)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sudionik_PripadnostFirmi");
        });

        modelBuilder.Entity<Sudjeluju>(entity =>
        {
            entity.HasKey(e => new { e.IdProjekt, e.IdUloga, e.IdSudionik });

            entity.ToTable("Sudjeluju");

            entity.HasOne(d => d.IdProjektNavigation).WithMany(p => p.Sudjelujus)
                .HasForeignKey(d => d.IdProjekt)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sudjeluju_Projekt");

            entity.HasOne(d => d.IdSudionikNavigation).WithMany(p => p.Sudjelujus)
                .HasForeignKey(d => d.IdSudionik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sudjeluju_Sudionik");

            entity.HasOne(d => d.IdUlogaNavigation).WithMany(p => p.Sudjelujus)
                .HasForeignKey(d => d.IdUloga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sudjeluju_Uloge");
        });

        modelBuilder.Entity<Transakcija>(entity =>
        {
            entity.HasKey(e => e.IdTransakcija);

            entity.ToTable("Transakcija");

            entity.Property(e => e.IdTransakcija).ValueGeneratedNever();
            entity.Property(e => e.Ibanposiljatelja)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBANPosiljatelja");
            entity.Property(e => e.Ibanprimatelja)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IBANPrimatelja");
            entity.Property(e => e.Iznos)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OpisTransakcije)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdVrstaTransakcijeNavigation).WithMany(p => p.Transakcijas)
                .HasForeignKey(d => d.IdVrstaTransakcije)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transakcija_VrstaTransakcije");
        });

        modelBuilder.Entity<Uloge>(entity =>
        {
            entity.HasKey(e => e.IdUloga);

            entity.ToTable("Uloge");

            entity.Property(e => e.IdUloga).ValueGeneratedNever();
            entity.Property(e => e.OpisUloga)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdVrstaUlogaNavigation).WithMany(p => p.Uloges)
                .HasForeignKey(d => d.IdVrstaUloga)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Uloge_VrstaUloge");
        });

        modelBuilder.Entity<VoditeljProjektum>(entity =>
        {
            entity.HasKey(e => e.IdVoditelj);

            entity.Property(e => e.IdVoditelj).ValueGeneratedNever();
            entity.Property(e => e.ImeVoditelja)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Oib).HasColumnName("OIB");
            entity.Property(e => e.PrezimeVoditelja)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VrstaAktivnosti>(entity =>
        {
            entity.HasKey(e => e.IdVrstaAktivnosti);

            entity.ToTable("VrstaAktivnosti");

            entity.Property(e => e.IdVrstaAktivnosti).ValueGeneratedNever();
            entity.Property(e => e.NazivAktivnosti)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VrstaDokumentum>(entity =>
        {
            entity.HasKey(e => e.IdVrstaDokument);

            entity.Property(e => e.IdVrstaDokument).ValueGeneratedNever();
            entity.Property(e => e.NazivVrste)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VrstaProjektum>(entity =>
        {
            entity.HasKey(e => e.IdVrstaProjekta);

            entity.Property(e => e.IdVrstaProjekta).ValueGeneratedNever();
            entity.Property(e => e.NazivVrsteProjekta)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<VrstaTransakcije>(entity =>
        {
            entity.HasKey(e => e.IdVrstaTransakcije);

            entity.ToTable("VrstaTransakcije");

            entity.Property(e => e.IdVrstaTransakcije).ValueGeneratedNever();
            entity.Property(e => e.NazivTransakcije)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VrstaUloge>(entity =>
        {
            entity.HasKey(e => e.IdVrstaUloga);

            entity.ToTable("VrstaUloge");

            entity.Property(e => e.IdVrstaUloga).ValueGeneratedNever();
            entity.Property(e => e.Naziv)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Zadaci>(entity =>
        {
            entity.HasKey(e => e.IdZadatak);

            entity.ToTable("Zadaci");

            entity.Property(e => e.IdZadatak).ValueGeneratedNever();
            entity.Property(e => e.Aktivan)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NositeljZadatka)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Opis)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPrioritetZadatkaNavigation).WithMany(p => p.Zadacis)
                .HasForeignKey(d => d.IdPrioritetZadatka)
                .HasConstraintName("FK_Zadaci_PrioritetZadatka");

            entity.HasOne(d => d.IdZahtjevNavigation).WithMany(p => p.Zadacis)
                .HasForeignKey(d => d.IdZahtjev)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Zadaci_Zahtjev");
        });

        modelBuilder.Entity<Zahtjev>(entity =>
        {
            entity.HasKey(e => e.IdZahtjev);

            entity.ToTable("Zahtjev");

            entity.Property(e => e.IdZahtjev).ValueGeneratedNever();
            entity.Property(e => e.Opis)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Prioritet)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Vrsta)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}